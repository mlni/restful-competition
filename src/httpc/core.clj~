(ns httpc.core
  (:require [http.async.client :as c])
  (:gen-class))

(defn test-http []
  (with-open [client (c/create-client)]
    (let [qry "http://www.google.ee/search?q="
	  resps (for [i (range 10)] (c/GET client "http://localhost:8080/"))
	  start (System/currentTimeMillis)]
      ; (c/await response)
      
      (while (not (every? #(or (c/done? %) (c/failed? %)) resps))
	(println ".")
	(when (> (- (System/currentTimeMillis) start) 5000)
	  (throw (RuntimeException. "Timeout")))
	(Thread/sleep 100))
      (map #(if (c/failed? %1)
	      (c/error %1)
	      (c/string %1))
	   resps))))

(defn active-players []
  [{:name "matti" :url "http://localhost:8080/"}
   {:name "bill" :url "http://localhost:4000/"}])

(def *timeout* 5000)

(defn create-test [player request expectation]
  {:player player
   :request request
   :expect expectation})

(defn to-question [p question]
  (str (:url p) question))

(defn create-tests []
  (doall
   (for [player (active-players)]
     (create-test player
		  (to-question player "?q=your_name_is")
		  (:name player)))))

(defn assert-response [test resp]
  (println "asserting"
	   (get-in test [:player :name])
	   (:expect test) (:content resp)
	   (= (:expect test) (:content resp))))

(defn to-response [r]
  {:headers (c/headers r)
   :content (c/string r)
   :error (c/error r)
   :status (c/status r)})

(defn timeout? [start]
  (let [delta (- (System/currentTimeMillis) start)]
    (> delta *timeout*)))

(defn test-loop []
  (with-open [client (c/create-client)]
    (let [tests (create-tests)
	  responses (map (fn [test]
			   (assoc test :response (c/GET client (:request test))))
			 tests)
	  start (System/currentTimeMillis)]
      (loop [responses responses]
	(let [[responded responses] (split-with #(c/done? (:response %)) responses)]
	  (println (count responded) (count responses))
	  (doseq [r responded]
	    (println "responded")
	    (assert-response r (to-response (:response r))))
	  (cond (empty? responses) 'done
		(timeout? start) 'timeout
		:else
		(do
		  (Thread/sleep 100)
		  (recur responses))))))))

(defn -main [& args]
  (println (test-http)))
